/* Generated By:JavaCC: Do not edit this line. FuncParser.java */
class FuncParser implements FuncParserConstants {
 public static void main(String args[]) {
  try {
    Exp e = new FuncParser(System.in).Start();
    System.out.println(e.tree());
    System.out.println(e + "");
    System.out.println("Result: " + e.eval());
  }
  catch (Exception en) {
    System.out.println("Syntax error!");
   }
  }

/*
 E -> E + E
 E -> E - E
 E -> E * E
 E -> E / E
 E -> E ^ E
 E -> num
 E -> "(" E ")"

 E -> (+|-)? T E2
 E2 -> + T E2
 E2 -> - T E2
 E2 ->
 T -> P T2
 T2 -> * P T2
 T2 -> / P T2
 T2 ->
 P -> F (^ P)?
 F -> num | "(" E ")"

 E -> T ((+|-) T)*
 T -> P ((*|/) P)*
 P -> F (^ P)?
 F -> id | num | "(" E ")"
 F -> "sin" "(" E ")"
 F -> "cos" "(" E ")"
 F -> "tan" "(" E ")"
 F -> "ln" "(" E ")"
 F -> "log" "(" E ")"
 F -> "exp" "(" E ")"
 F -> "abs" "(" E ")"
*/
  static final public Exp Start() throws ParseException {
  Exp e;
    e = E();
    jj_consume_token(0);
                {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp E() throws ParseException {
  Exp e, e2; int k = 1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
                     k = -1;
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    e = T();
         e = k > 0 ? e : new Times(e, new Num(-1));
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        e2 = T();
                   e=new Plus(e, e2);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        e2 = T();
                    e=new Minus(e, e2);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
   {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp T() throws ParseException {
  Exp e, e2;
    e = P();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
        jj_consume_token(TIMES);
        e2 = P();
                     e=new Times(e, e2);
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
        e2 = P();
                     e=new Divide(e, e2);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
   {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp P() throws ParseException {
  Exp e, e2;
    e = F();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POWER:
      jj_consume_token(POWER);
      e2 = P();
                           e=new Power(e, e2);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp F() throws ParseException {
  Exp e; Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t = jj_consume_token(ID);
            {if (true) return new Var(t.image);}
      break;
    case NUM:
      t = jj_consume_token(NUM);
             {if (true) return new Num(Integer.parseInt(t.image));}
      break;
    case LPAR:
      jj_consume_token(LPAR);
      e = E();
      jj_consume_token(RPAR);
                         {if (true) return e;}
      break;
    case SIN:
      jj_consume_token(SIN);
      jj_consume_token(LPAR);
      e = E();
      jj_consume_token(RPAR);
                               {if (true) return new Sin(e);}
      break;
    case COS:
      jj_consume_token(COS);
      jj_consume_token(LPAR);
      e = E();
      jj_consume_token(RPAR);
                               {if (true) return new Cos(e);}
      break;
    case TAN:
      jj_consume_token(TAN);
      jj_consume_token(LPAR);
      e = E();
      jj_consume_token(RPAR);
                               {if (true) return new Tan(e);}
      break;
    case LN:
      jj_consume_token(LN);
      jj_consume_token(LPAR);
      e = E();
      jj_consume_token(RPAR);
                              {if (true) return new Ln(e);}
      break;
    case LOG:
      jj_consume_token(LOG);
      jj_consume_token(LPAR);
      e = E();
      jj_consume_token(RPAR);
                               {if (true) return new Log(e);}
      break;
    case EULER:
      jj_consume_token(EULER);
      jj_consume_token(LPAR);
      e = E();
      jj_consume_token(RPAR);
                                 {if (true) return new Euler(e);}
      break;
    case ABS:
      jj_consume_token(ABS);
      jj_consume_token(LPAR);
      e = E();
      jj_consume_token(RPAR);
                               {if (true) return new Abs(e);}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  static public FuncParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x6,0x6,0x6,0x6,0x18,0x18,0x20,0x1ff40,};
   }

  public FuncParser(java.io.InputStream stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FuncParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  public FuncParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FuncParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  public FuncParser(FuncParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  public void ReInit(FuncParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[22];
    for (int i = 0; i < 22; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 22; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

}
